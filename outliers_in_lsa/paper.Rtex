%-*- mode: Rnw-mode; outline-regexp: "\\\\section\\|\\\\subsection";fill-column: 95; -*-
<<begin.rcode, include=FALSE>>=
library(knitr)
opts_chunk$set(fig.path='figures/',fig.keep='last',dev='pdf',fig.align='center')
opts_chunk$set(fig.width=6, fig.height=4, out.width='0.7\\textwidth')
opts_chunk$set(cache.path='cache/', highlight=FALSE)
@
\documentclass[12pt]{article}
\usepackage[longnamesfirst]{natbib}
% \usepackage[usenames]{color}  % causes problems in knitr
\usepackage{graphicx}  % Macintosh pdf files for figures
\usepackage{amssymb}   % Real number symbol {\Bbb R}
\usepackage{amsmath}
\usepackage{bbm}
\input{../../../standard}

% --- margins
\usepackage{../../sty/simplemargins}
\setleftmargin{0.8in}   % 1 inch is NSF legal minimum
\setrightmargin{0.8in}  % 1 inch is NSF legal minimum
\settopmargin{1in}    % 1 inch is NSF legal minimum
\setbottommargin{1in} % 1 inch is NSF legal minimum

% --- Paragraph split, indents
\setlength{\parskip}{0.00in}
\setlength{\parindent}{0in}

% --- Line spacing
\renewcommand{\baselinestretch}{1.4}

% --- page numbers
\pagestyle{empty}  % so no page numbers

% --- Hypthenation
\sloppy  % fewer hyphenated
\hyphenation{stan-dard}
\hyphenation{among}

% --- Customized commands, abbreviations
\newcommand{\TIT}{{\it  {\tiny Outliers and Rotations (DRAFT, \today)}}}
\newcommand{\prs}{\mbox{$\ol{\ol{R}}^2$}}
\newcommand{\aicc}{\mbox{\it AIC$_c$}}
\newcommand{\Wt}{\mbox{$\widetilde{W}$}}

% --- Header
\pagestyle{myheadings}
\markright{\TIT}

% --- Title

\title{ Outliers in Latent Semantic Regression: A Tutorial Example }
 \author{ Dean P. Foster \ \ Mark Liberman \ \ Robert A. Stine
 \footnote{Dean Foster and Robert Stine are members of the Department
 of Statistics of the University of Pennsylvania.
 Mark Liberman is at the Linguistic Data Corporation.}    \\
        University of Pennsylvania \\
        Philadelphia, PA }

\date{\today}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\begin{document}
\vspace{-0.5in}
\maketitle
% ------------------------------------------------------------------------------
\vspace{-.5in}

\abstract{

 A single outlying document is able to exert a surprising influence
 upon the structure of a latent semantic analysis (LSA).  The outlier
 can influence several latent components, leading to surprising
 effects when these components are used, for instance, as features in
 a predictive model.  The outlier can easily lead to a highly
 leveraged observation that distorts the influence of several latent
 components.  Because of this mixing effect, the outlier contaminates
 several variables, and the resulting model confounds useful structure
 with that presented by the original outlying text.  These effects can
 distort, for example, the use of cross-validation for selecting model
 features.  In our case, a simple rotation of the latent components,
 however, localizes the effects of the outlier.  Not only are these
 rotated components more robust to the influence of the outlier,
 rotated components are more interpret able as predictors in other
 models.

}

% ------------------------------------------------------------------------------

\vspace{0.15in}

\noindent {\it Key Phrases:

 varimax rotation, singular value decomposition, text mining}

\clearpage



% ------------------------------------------------------------------------------
\section{Introduction}
\label{sec:intro}
% ------------------------------------------------------------------------------

 The effects of outliers on data analysis are well known.  Simple
 examples abound: a single positive outlying point can lead to a
 positive average even if the rest of the data are negative.  Methods
 for detecting outliers are well-developed in many domains,
 particularly regression analysis \citep[see, for instance,]
 []{belsley80}.  When combined with modern interactive graphics, these
 methods simplify the task of isolating outliers in a regression
 model.


 Outliers in text are less easy to appreciate.  Unusual text can be
 associated with the presence of different authors, vocabularies, or
 writing styles.  \citet{guthrie08} approach this problem by
 representing text using an ensemble of linguistic features.  They
 employ 158 explicit characteristics, including sentence length, parts
 of speech, and readability indices.  Once encoded by these features,
 Guthrie {\it et al} employ methods for multivariate outlier detection.
  Their objective is to produce homogeneous corpora by contrasting
 these properties of new text to those of a collection of reference
 documents.


 In contrast, we focus on the impact of outliers within a specific
 methodology, namely the use of features from an {\em unsupervised}
 latent semantic analysis (LSA) as predictive features of a model.
  Variations on LSA have been used to identify outlying clusters of
 documents \citep[\eg][]{kobayashi02}.  Our objective here is rather
 different.  Rather than isolate a subset of documents, we emphasize
 the surprisingly large influence exerted by a {\em single} outlying
 document when features from LSA are used as predictors in a
 regression model.  The variance maximization used by LSA spreads the
 impact of this outlying document over several features, complicating
 model selection and cross validation.  Fortunately for us, a simple
 rotation (known as varimax) that creates more interpretable features
 also confines the outlier to a single latent variable.  Once
 confined, the outlier has a benign impact on both model selection and
 prediction.  The outlier remains leveraged -- that is, distinct from
 the other listings -- but no longer influences the predictions of the
 model.  The specific application developed here investigates how well
 unsupervised features from LSA from the brief text of real-estate
 listings predict the prices.  A single outlying listing complicates
 both the choice of features for the model as well as the
 interpretation of which features influence the price.


% ------------------------------------------------------------------------------
\section{Property Listings}
\label{sec:listings}
% ------------------------------------------------------------------------------

 The data for this example describe $n=$7,384 property listings in
 Chicago, IL, extracted (with permission) from trulia.com in 2013.  At
 the time, Trulia offered more than 30,000 listings for Chicago, but
 most were foreclosure announcements that we exclude from our
 analysis.  The response of interest is the log of the listed price.
  The log transformation produces roughly Gaussian variation.  Without
 this transformation, predictive models typified by least squares
 regression would focus on fitting the most highly valued properties.


 The listings for these properties are written in an idiosyncratic
 vernacular familiar to those who have recently shopped for a house.
  These listings do not obey the grammatical rules of English.  Some
 authors write in sentences, others not, and a variety of
 abbreviations appear.  Punctuation and description vary from spartan
 to effusive.  The following four listings are typical.

 \begin{verbatim}
    Stunning skyline views like something from a postcard are yours
    with this large 2 bed, 2 bath loft in Dearborn Tower!  Detailed
    hrdwd floors throughout the unit compliment an open kitchen and
    spacious living-room and dining-room /w walk-in closet, steam
    shower and marble entry.  Parking available.

    4 bedroom, 2 bath 2 story frame home. Property features a large
    kitchen, living-room and a full basement. This is a Fannie Mae
    Homepath property.

    Great short sale opportunity...  Brick 2 flat with 3 bdrm each unit.
    4 or more cars parking. Easy to show.

    This flat with all 3 bed units is truly a great investment!! This
    property also comes with a full attic that has the potential of a
    build-out thats a possible 4 unit building in a great area!!  Blocks
    from lake and transportation. Looking for a deal in todays market -
    here is the one!!!
 \end{verbatim}

 \noindent
 The following listing is the outlier of the analysis.  Rather than
 describe the property, this listing describes an organization devoted
 to childhood education.

 \begin{verbatim}
    Since fall of 1997 Saint Rose has been a center providing day
    training services to adults who have developmental disabilities.  For
    over 40 years prior to becoming a day training center, we were a
    school who taught children with developmental disabilities.  We
    provide developmental skills for people who wish to improve their
    lives.
 \end{verbatim}


 We adopt a minimalist approach to tokenization: we convert all text
 to lower case, distinguish punctuation characters as separate word
 types, and replace instances of rare word types by a common
 out-of-vocabulary token.  For example, the listing
 \begin{verbatim}
   Brick flat, 2 bdrm.  With two-car garage.
 \end{verbatim}
 \noindent
 becomes a list of 10 tokens representing 9 word types (angle brackets
 surround punctuation tokens)
 \begin{verbatim}
   {brick, flat, <,>, 2, bdrm, <.>, with, two-car, garage,<.> }
 \end{verbatim}
 \noindent
 We leave embedded hyphens in place and do not correct spelling errors
 or typos.  Abbreviations remain as given. \citep[][describe more
 elaborate methods for tokenizing that are more suited to regular
 language.]{manning99,jurafsky09,turney10}.

% define path, read response, token lengths, doc/type matrix
<<get-data, cache=TRUE, echo=FALSE, results='hide'>>=
source("~/C/text/functions.R")
city       <- "ChicagoOld3"
path       <- paste0("~/C/text/text_src/temp/",city,"/");
file       <- paste0(path,"parsed.txt")
Data       <- read.table(file, header=TRUE)
n          <- nrow(Data)
logPrice   <- Data[,"Y"]
price      <- exp(Data[,"Y"])
nTokens    <- Data[,"m"]
logTokens  <- log(nTokens)
W          <- as.matrix(read.table(paste0(path,"w5704.txt"),header=T,as.is=T))
type.names <- scan(paste0(path,"types_5704.txt"), what="character")
colnames(W)<- type.names
type.freq  <- colSums(W)
Zipf       <- data.frame(list(x=1:length(type.freq),y=type.freq,lx=log(1:length(type.freq)),ly=log(type.freq)))

@


 When applied to our data from Chicago, the $n=$\Sexpr{nrow(Data)} property
 listings contain 535,921 word tokens representing 15,215 unique word
 types.  After tokenizing, listings average
 \Sexpr{round(mean(nTokens),1)} tokens, but the average is a bit
 misleading due to skewness of the distribution.  The shortest listing
 has 2 tokens, whereas the longest has 568.  The median length is much
 smaller than the average, about \Sexpr{round(median(nTokens),1)}
 tokens.  As typical in text, the most common word types occur
 frequently whereas most words appear infrequently.  More than half of
 these tokens appear only once or twice.  We clustered these rare
 types into one category ($<$OOV$>$, for ``out of vocabulary''),
 resulting in a reduced vocabulary of $m=$5,704 word types.  The most
 common word types are punctuation.  The document/type matrix $W$
 holds these counts.  The $n \times m$ context-word matrix $W$ holds
 the counts of these word types across the listings; $W_{ij}$ is the
 number of times word type $j$ appears in the \ith document.  (All
 vectors in our notation are column vectors.)  $W$ is a sparse matrix:
 a small portion of the vocabulary appears in most listings.


\begin{figure}
<<zipf, echo=FALSE>>=
 show.names <- 8
 common.words <- type.names[1:show.names]
 plot(y~x, xlab="Rank", ylab="Type Frequency", log="xy", data=Zipf)
 with(Zipf, text(0.9*x[1:show.names],0.86*y[1:show.names],common.words,cex=c(1,1,0.5,0.5,0.5,0.5,0.4,0.5)))
 regr<-lm(ly~lx, data=Zipf[1:500,]);
 beta <- coefficients(regr)
 lx <- log(x<-c(1,5000)); y <- exp(predict(regr, data.frame(lx=lx)))
 lines(x,y,col="gray")

@
\caption{    \label{fig:zipf}
 { \sl The log of the frequency of word types in the listings for
 properties in Chicago is linear in the log of the rank of the most
 common 500 words with slope \Sexpr{round(beta[2],2)}.}  }
\end{figure}


 Figure \ref{fig:zipf} graphs the log of the frequencies $f_j = \sum_i
 W_{ij}$ of these word types versus the log of their ranks.  It is
 common in text to find a linear trend with slope near 1 in this
 graph, the signature of a Zipf distribution \citep{zipf35, baayen02}.
  Even though the text of real estate listings is not standard
 English, the frequencies $f_j$ resemble those produced by a power law
 \citep{clauset09}.  The shown line (with log-log slope
 \Sexpr{round(beta[2],2)}) holds only for more common word types.  For
 less common words, the frequencies drop off more rapidly.



% ------------------------------------------------------------------------------
\section{Modeling with Latent Regressors}
\label{sec:modeling}
% ------------------------------------------------------------------------------

% preliminary regression on length of listing
<<token-regr, echo=FALSE,results='hide'>>=
token.regr <- lm(logPrice ~ poly(logTokens,5));
(r2 <- summary(token.regr)$r.squared)

@

 Regression models are very predictive of the listing price, capturing
 about 2/3 of the variation among log prices.  All of these models
 share a common adjustment for the length of the property listing.
  Inclusion of this effect implies that a word type is not given
 credit for explaining variation in prices only because that word type
 is common.  As might be anticipated from the context, longer listings
 are associated with higher prices.  One has more to say about a nicer
 property.  A simple 5th degree polynomial in the log of the listing
 length explains about \Sexpr{round(100*r2,0)}\% of the variation in
 log prices.  (One could use more elaborate smoothing such as offered
 by a generalized additive model to similar effect, but the direct
 approach with a polynomial provides a simpler analysis.)


 Three of the common choices for weights can be motivated as variance stabilization.
 For example, one might choose to stabilize the differing variances produced by
 unequal document lengths.  Define
 ${W}^{*}$ to be the $n \times m$ matrix with elements ${W}^{*}_{ij} =
 W_{ij}/\sqrt{n_i}$ with $n_i = \sum_j W_{ij}$ counting the number of word
 tokens in the \ith listing.  Were tokens within listings random samples from a
 multinomial distribution with probabilities $p_{1}, \ldots, p_{m}$ across the word types,
 then $\Var({W}^{*}_{ij}) = p_j(1-\sum_{k\ne j} p_k)$, regardless of the
 number of words in the listing.  Similarly, we can define $W^{**}$ with elements
 $W^{**}_{ij} = W_{ij}/\sqrt{m_j}$, where $m_j = \sum_i W_{ij}$ counts the
 number of tokens of word type $j$ across all listings. This standardization
 down-weights the most common word types.  Our choice for weights combines these and uses
 \begin{equation}
   \widetilde{W}_{ij} = W_{ij}/\sqrt{n_i\,m_j} \;.
 \label{eq:Wtij}
 \end{equation}
 This combination produces a novel approximation to a canonical
 correlation analysis developed in Section \ref{sec:cca}
 below. \citet{turney10} describes these and other weightings, such as
 the popular term frequency-inverse document frequency (TF-IDF), used
 in LSA.


 Token space is the vector space generated by modeling the sequence of word
 tokens as indicator vectors.  From this perspective, the frequencies in the
 document-word matrix $W$ are seen to be proportional to estimated covariances between random variables
 that represent different word tokens. Token space should feel
 familiar to statisticians and provides motivation and heuristics for
 creating a wide range of features from text.


 Once we think of $W$ as (proportional to) an estimated covariance matrix, it becomes natural to
 associate LSA with canonical correlation analysis (CCA).  In order for the SVD of $W$ to produce canonical vectors,
 however, we have to standardize the columns of $L$ and $X$.  Let
 \begin{equation}
   S_L = L'L/(N-1) = \mbox{diag}(n_i) \quad \mbox{ and  } \quad S_X = X'X/(N-1)
 \label{eq:SL}
 \end{equation}
 denote the uncentered covariance matrices defined by $L$ and $X$,
 respectively.  As shown in the appendix, the SVD of $S_L^{-1/2} W
 S_X^{-1/2}$ yields the coefficients that define a CCA.  Standardizing
 $L$ is easy because $S_L$ is diagonal (when $L$ is uncentered), but
 $S_X$ is not.  To avoid computing and inverting $X'X$, we treat its
 columns as orthogonal and use the approximation $\widetilde{S}_X =
 \mbox{diag}(m_j)$, with $m_j$ counting the number of tokens of word
 type $\omega_j$. The resulting regressors are the left singular
 vectors of $S_L^{-1/2} W \widetilde{S}_X^{-1/2} = \widetilde{W}$
 defined in equation \eqn{Wtij}, matching the weighed principal
 components defined in Section \ref{sec:regrUsingLSA}.  This
 connection provides some further intuition behind the evident success
 of LSA in producing regressors.  The singular vectors of
 $\widetilde{W}$ are the coefficients that define the canonical
 variables of CCA.  The leading left singular vector identifies the
 linear combination of documents (columns of $L$) that is most
 correlated with a linear combination of words (columns of $X$).  If
 we imagine the elements of this singular vector being 0/1, then in
 this heuristic sense the CCA identifies clusters of documents
 associated with different collections of word types.

%%  Explain the CCA adjustments here

%%  Review SVD notation, labeling U as the LSA components and
%%  V as the LSA loadings (using language of factor analysis) or
%%  principal components analysis

 Because \Wt\ has a modest size, we can compute its SVD directly,
 without need for more scalable methods.  Just the same, random
 projection works quite nicely.  Here, we use it to obtain the first
 500 singular values and associated singular vectors (that is, the
 first 500 columns of $U$ and $V$).  To speed this calculation, we
 exploit random projection algorithms defined and analyzed in
 \citet{tropp10}.  Random projections produce $U_{1:k}$ in less than a
 minute in our application and are essential in larger problems.


<<read-lsa, cache=TRUE, echo=FALSE,results='hide'>>=
## read SVD of W computed in C++
weights <- "cca"; 
nProj<-500;
file    <- paste0(path,"lsa_",weights,"_", nProj,"_p4_u.txt")
LSA     <- as.matrix(read.table(file, header=TRUE)); dim(LSA)
(file    <- paste0(path,"lsa_",weights,"_", nProj,"_p4_d.txt"))
D       <- scan(file)
(file    <- paste0(path,"lsa_",weights,"_", nProj,"_p4_v.txt"))
V       <- as.matrix(read.table(file, header=TRUE)); dim(V)

@

 The spectrum of the CCA scaled document/term matrix \Wt\ shown in
 Figure \ref{fig:spectrum} falls off slowly, with no hint of a clear
 separation between ``large'' and ``small'' singular values.  The
 fitted line in the figure is estimated from the second through the
 250th singular values, omitting the first singular value; the
 estimated decay rate is about -0.2.  The first pair of singular
 vectors capture the size of the counts in the scaled listings. The
 inset of Figure \ref{fig:spectrum} graphs the square of the first LSA
 component on the number of tokens in each listing.  Since our models
 explicitly contain a polynomial in the number of tokens, we omit the
 first component as it would induce substantial collinearity without
 improving predictions.


% log/log plot of spectrum of CCA scaled matrix
\begin{figure}
<<spectrum, echo=FALSE, results='hide'>>=
plot(D, xlab="Component", ylab="Singular Value", log="xy")
x <- log(2:250);
y <- log(D[2:250]);
r <- lm(y~x);
(beta <- coefficients(r))
pred <- predict(r, newdata=data.frame(x=log(1:400)))
lines(1:400, exp(pred), col="gray")
## add inset
par(fig = c(.6, 0.95, .6, 0.95), new=TRUE)
plot(nTokens, LSA[,1]^2, xlab="Number of Tokens", ylab="Squared Singular Vector")
reset()

@

\caption{ \label{fig:spectrum}
 {\sl The singular values $\la_i$ of the weighted document-term matrix
 $\widetilde{W}$ decay relatively slowly, following a power law $\la_i
 \propto i^{-\eta}$.  } The rate of decay $\eta \approx 0.2$. The
 leading singular value represents the effect of document length. }
\end{figure}


 When used as regressors, the explanatory power (quantified by the
 absolute values of $t$-statistics of the regression coefficients)
 shown in Figure \ref{fig:lsa_tstats}) fall off monotonically with the
 magnitude of the singular values.  That is, leading singular vectors
 tend to be more predictive of log-prices than those that follow.  The
 red curve in the figure tracks the local average of the statistics.
  The solid horizontal black line is the expected value of the
 absolute value of a standard normal, $\sqrt{2/\pi}$. The dashed
 horizontal line is the Bonferroni threshold $\Phi^{-1}(1-0.025/1089)
 \approx 4.08$.  Between these, the almost flat, red curve is the
 loess smooth of $|t|$; the average $|t|$ is only slightly larger than
 one expects for a model with no signal.  Scattered coefficients of
 only 16 words exceed the Bonferroni threshold.  This decay is
 somewhat surprising because these regressors are constructed in an
 unsupervised manner.  We offer a partial explanation of this effect
 in the following section.  \citep[][shows how to use this
 monotonicity to construct more efficient coefficient
 estimates.]{zhuang14}


% plot absolute values of the t-statistics of initial singular vectors
\begin{figure}
<<lsa-tstats, echo=FALSE, results='hide'>>=
lsa    <- as.matrix(LSA[,2:nProj])
sr.lsa <- summary(regr.lsa <- lm(logPrice ~ poly(logTokens,5) + lsa));
coef.summary.plot(sr.lsa, "LSA Component", omit=6, show.qq=FALSE)

@

\caption{  \label{fig:lsatstats}
 {\sl Absolute $t$-statistics from the regression of log prices on the
 LSA components of $\widetilde{W}$.} The figure omits the leading
 singular value (size effect); the estimated model includes a size
 adjustment. }
\end{figure}


<<kurtosis>>=
# what is the kurtosis of the LSA components themselves
# does high kurtosis imply higher risk in replicating LSA effect?
library(moments)
kk <- apply(LSA,2,kurtosis)    # generally high around 25th
order(kk, decreasing=T)[1:5]   # largest is 27, the outlier guy
plot(kk)
plot(lsa[,27])
plot(lsa[,38])

#  second largest kurtosis on lsa[,38] also has outlier, 3506.
#  are words of this listing also basically repeated here and not
#  elsewhere, like those of the weird listing?
#    location elston appears 4 times in corpus, 3 in this one and
#  once in another.   laporte is 3 times in just this one listing
#  Does this second special listing also define another free-rider?
j <- which("elston" == type.names)
sum(W[,j]); plot(W[,j])
(j <- which("laporte" == type.names))
sum(W[,j]); plot(W[,j])

#  how to distinguish a document as being really different, outside
#  the lsa analysis itself?  Just a matter of leverage?

#  what happens to the kurtosis in general after doing the rotation

@

 A regression diagnostic plot of a smaller model that uses only the
 first 100 LSA components shows that these models may have problems
 with outliers.  We chose a model with 100 which is near the kink in
 the magnitude of the significance of the $t$-statistics in Figure
 \ref{fig:lsatstats}.  Figure \ref{fig:diagplot} plots the standardized
 residuals from the model on the associated leverages.  In a
 regression with design matrix $X$, leverages are the diagonal
 elements $h_{i}$ of the projection, or hat, matrix $H =
 X(X'X)^{-1}X'$.  Standardized residuals $r_i$ are scaled to have
 equal variance,
 \begin{equation}
     r_i = \frac{e_i}{s\, \sqrt(1-h_i)} \;,
 \label{eq:sres}
 \end{equation}
 where $e_i$ is the usual residual for the \ith\ case and $s$ is the
 root mean squared error of the regression.  These leave-one-out
 diagnostics are easily computed without needing to refit $n$ models
 \citep{belsley80}.  The amount of influence exerted by each case on
 the fitted model, Cook's D statistic, is roughly the product of the
 leverage times the Studentized residual. Figure \ref{diagplot}
 highlights contours of equal influence.  Though the labeled points
 are highly leveraged -- unusual within the context of the regressors
 -- none exerts significant influence on the fitted model.  That is,
 if any one of these cases were removed, the estimated coefficient
 vector does not change by a statistically significant amount.


% regression diagnostic plot of standardized residuals on leverages
\begin{figure}
<<diag-plot, echo=FALSE, results='hide'>>=
lsa  <- as.matrix(LSA[,2:100])
sr   <- summary(regr.lsa <- lm(logPrice ~ poly(logTokens,5) + lsa))
lev  <- hat(model.matrix(regr.lsa))
sres <- residuals(regr.lsa)/(sr$sigma * sqrt(1-lev))
plot(regr.lsa, which=5, id.n=5)
points(lev[3646],sres[3646], pch=19, col="black")

@

\caption{  \label{fig:diagplot}
 {\sl A regression diagnostic plot reveals several highly leveraged
 observations, but indicates none with much influence on the model. }
  The problematic outlier is the filled-in point, case 3646.}
\end{figure}


 The decaying significance of LSA components observed in Figure
 \ref{fig:lsatstats} suggests using a variable selection criterion
 such as the corrected Akaike Information Criterion \aicc\ or 10-fold
 cross-validation to determine the number of components to retain in
 the model.  The corrected \aic\ statistic is defined \citep{hurvich89}
 \begin{equation}
    AIC_{c}(k) = n \log \frac{RSS(k)}{n} + \frac{n+k}{1-(k+2)/n} \;,
 \end{equation}
 where $k$ is the number of estimated parameters in the estimated
 regression.  Both \aicc\ and cross-validation are well suited to the
 problem of deciding how many LSA components to use in the model, such
 as picking between a model with 50 components versus a model with
 100.  The model with 100 will have a better in-sample fit, but may
 not be better if confronted with new listings.  In most applications,
 these approaches to model selection lead to similar results.  In the
 case of these data, the results are very different.  Figure
 \ref{fig:cvss} shows the sequence of \aicc\ and cross-validation mean
 squared errors, repeated for 5 random splits of the data into 10
 folds.  (One obtains similar results with fewer or more folds.)
  Whereas \aicc\ indicates that adding more and more of these features
 improves the fit of the model, cross-validation bottoms out near 100
 features and shows several sudden spikes.  In particular, the
 addition of the 28th component produces an abrupt 20\% increase in
 the out-of-sample squared error whereas \aicc\ continues its smooth
 decay (indicating better models).

% generate data used by c++ in fit AS Needed
% <<write-table-to-c>>=
% poly <- model.matrix(~ poly(logTokens,5) - 1)
% colnames(poly) <- paste("poly_",1:5,sep="")
% write.table(poly, paste(path,"logtoken_poly_5.txt",sep=""), row.names=F)
% @

% read CV results, last item is varimax CV
<<read-cv, cache=TRUE, echo=FALSE, results='hide'>>=
cv.results.1.10 <- read.delim(paste0(path,"cv_15242/aic_lsa_10f.txt"))
cv.results.2.10 <- read.delim(paste0(path,"cv_24387/aic_lsa_10f.txt"))
cv.results.3.10 <- read.delim(paste0(path,"cv_31427/aic_lsa_10f.txt"))
cv.results.4.10 <- read.delim(paste0(path,"cv_53853/aic_lsa_10f.txt"))
cv.results.5.10 <- read.delim(paste0(path,"cv_73241/aic_lsa_10f.txt"))
cv.results.5.vmx<- read.delim(paste0(path,"cv_73241/aic_vmx_20_2_250.txt"))

@

% plot 10-fold cross-validation results with AICc and varimax for later reference
\begin{figure}
<<cvss-plot, out.width='.8\\textwidth', echo=FALSE, results='hide'>>=
x <- 0:(nrow(cv.results.1.10)-1)
xlim <- NULL;   ylim <- c(3900,9000)
plot (x,cv.results.1.10[,"AICc"]+2000, log="y", type="l",   xlim=xlim, ylim=ylim, col="red",
      ylab="10-Fold CVSS", xlab="Component Added")
lines(x,cv.results.1.10 [,"CVSS"], col="black")
lines(x,cv.results.2.10 [,"CVSS"], col="black")
lines(x,cv.results.3.10 [,"CVSS"], col="black")
lines(x,cv.results.4.10 [,"CVSS"], col="black")
lines(x,cv.results.5.10 [,"CVSS"], col="black")
lines(  cv.results.5.vmx[,"CVSS"], col="gray")
par(fig = c(0.45, 0.90, 0.45, 0.90), new=TRUE)   # add inset to zoom on anomaly
xlim <- c(24,34);   ylim <- c(5000,7500)
plot (x,cv.results.1.10[,"AICc"]+2000, log="y", type="l",   xlim=xlim, ylim=ylim, col="red",
      ylab="", xlab="", cex.axis=0.75)
lines(x,cv.results.1.10 [,"CVSS"], col="black")
lines(x,cv.results.2.10 [,"CVSS"], col="black")
lines(x,cv.results.3.10 [,"CVSS"], col="black")
lines(x,cv.results.4.10 [,"CVSS"], col="black")
lines(x,cv.results.5.10 [,"CVSS"], col="black")
reset()

@

\caption{ \label{fig:cvss}
 {\sl Corrected AIC (red) and five replications of 10-fold
 cross-validation sum of squares for adding increasing numbers of LSA
 components to the regression for log price. }  The value of \aicc\
 was shifted by an additive constant to match the scale of the
 cross-validation sums.  The gray curve shows the CVSS using rotated
 components explained in Section \ref{sec:rotation}. }
\end{figure}

 Having seen these results from cross validation, a careful residual
 analysis reveals the problematic outlier.  Figure \ref{fig:calib}
 shows a plot of the the listing prices on the predicted prices for
 the specific fold in cross-validation that omits the outlier.  Note
 that these are shown on a log scale -- the error at this one point is
 large enough to explain the sudden jump in the CVSS.



% build a calibration plot like those that influence CVSS graph
\begin{figure}
<<calib, echo=FALSE, results='hide'>>=
set.seed(23743)
n        <- length(logPrice)
n.folds  <- 10
outlier  <- 3646
folds    <- c(rep(1:n.folds,ceiling(n/n.folds)))[1:n]
folds    <- sample(folds,n, replace=F)
out.fold <- folds[outlier]
## fit the regression to the data without outlier
degree   <- 5
lsa      <- LSA[,2:28]
i        <- (out.fold != folds) # fit on these
data     <- list(y=logPrice[i], xi=poly(logTokens,degree)[i,], x=lsa[i,])
r        <- lm(y ~ xi + x, data=data );
## predict the hold back data
i        <- (out.fold == folds)
data     <- list(y=logPrice[i], xi=poly(logTokens,degree)[i,], x=lsa[i,])
pred     <- predict(r, newdata=data)
j        <- sum((out.fold==folds)[1:3646]); (logPrice[i]-pred)[j]
col      <- rep("black",sum(i)); col[j]<-"red"
plot(pred, logPrice[i], col=col, xlab="Predicted Log Price", ylab="Log Price") # calibration

@
\caption{ \label{fig:calib}
 {\sl Predicted price for the outlying listing is exceptionally large,
 producing the spike in the CVSS seen in Figure \ref{fig:cvss}.}}
\end{figure}


 Now that we recognize the source of the problem, it is simple to
 ``Monday morning quarterback'' and pick a plot that we {\em could}
 have used to recognize the flaw sooner had we examined residual plots
 for each of the increasing sequence of models summarized in Figure
 \ref{fig:diag2}.  With 27 LSA components, the outlying listing is
 leveraged, but has little effect on the fitted model.  With the
 addition of the 28th component, however, the both its leverage and
 influence have increased substantially.


% show regr diagnostic pre/post adding variable 28
\begin{figure}
<<diag2728, fig.keep='high', echo=FALSE, results='hide', out.width='0.5\\textwidth'>>=
ry <- lm(logPrice ~ poly(logTokens,5) + LSA[,2:27]);
plot(ry, which=5, id.n=1, cook.levels=c(1,8,32) )
ry <- lm(logPrice ~ poly(logTokens,5) + LSA[,2:28]);
plot(ry, which=5, id.n=1, cook.levels=c(1,8,32) )

@
\caption{ \label{fig:diag2}
  {\sl The leveraged outlier becomes strongly influential when the 28th
       LSA component joins the model.}  }
\end{figure}


% ------------------------------------------------------------------------------
\section{Rotations and Outliers}
\label{sec:rotation}
% ------------------------------------------------------------------------------

 Now that we have seen that a single outlier caused the surprising
 jump in the sequence of cross-validation errors, it would be easy to
 fix the problem: Simply exclude this case.  Do so works in this
 example, but we gain more insight by appreciating how it is that a
 single point -- one out of more than 7,000 -- can exert such large
 influence.


 The first step in gaining this understanding is to look at how the
 LSA components are defined.  Because LSA, like principal components
 analysis, seeks to maximize the variance of the constructed
 components, interpretation is problematic.  We observed that the
 leading component captures document length.  Other components mix
 distinct combinations of words that we will call ``rays''.  Figure
 \ref{fig:lsacomponents} explains this choice of names.  The figure
 shows a two-dimensional projection of the LSA loadings $V$.  This
 figure shows the loadings -- coefficients applied to the frequencies
 for the word types -- that define the 8th and 9th LSA components.
  When projected into 2 dimensions, these weights appear as rays
 emanating from the origin.  The ray directed from the origin to the
 lower left at ``auction'' appears to identify a cluster of words
 related auction sales.  The ray directed to the upper left toward
 ``downturn'' is harder to name.  The ray headed toward the right
 identifies properties offered by Wells Fargo.  Each LSA component
 typically captures several clusters of words which appear when
projected into two dimensions.



\begin{figure}
% draw LSA components
<<lsacomponents, echo=FALSE, results='hide'>>=
draw.pair <- function(V,j, k=NULL, label="Component", col="gray", show.names=T) {
    if(is.null(k)) k <- j + 1;
    plot(V[,j],V[,k], col=col, xlim=1.1*range(V[,j]), ylim=1.15*range(V[,k]),
         xlab=paste(label,j), ylab=paste(label,k));
    if (show.names) {
        w<-order(rowSums(V[,c(j,k)]^2),decreasing=T)[1:60]; abline(h=0,v=0,col="gray")
        text(V[w,j],V[w,k],colnames(W)[w],cex=0.7, offset=0.45, pos=c(1,2,3,4,1,2,3,4))
        w<-order(rowSums(V[,5:50]^2),decreasing=T)[1:60]; abline(h=0,v=0,col="gray")
        points(V[w,j],V[w,k],cex=0.5, pch=19, col="red")
        return(colnames(W)[w[1:20]])
    }}
draw.pair(V,8)

@
\caption{  \label{fig:lsacomponents}
  {\sl Loadings of LSA components typically mix several underlying dimensions.}  }
\end{figure}


 This ``mixing'' of the components generates a model in which the odd
 listing produces a highly influential outlier.  Figure
 \ref{fig:outloading} shows the loadings for components 27 and 28.
  Both are incrementally statistically significant predictors.  That
 is, adding each to a model that contains lower indexed LSA components
 produces a significant improvement in the fit of the model.  Notice
 that the ray directed toward the upper right and the word type
 ``developmental'' (which only occurs in the outlying listing)
 captures the text of this unusual listing and little else.  How is it
 possible for fitting this one listing to be a significant benefit to
 the model.

% show adding the outlier variable has a significant effect on the model
<<out-regr>>=
lsa <- LSA[,2:29]
data <- list(y=logPrice, xi=poly(logTokens,degree), x=lsa)
r <- lm(y ~ xi + x, data=data );
summary(r)

@


% show outlier loadings prior to rotation
\begin{figure}
<<outloading, echo=FALSE, results='hide'>>=
draw.pair(V,27)

@
 \caption{ \label{fig:outloading} {\sl Loadings of LSA components
 typically mix several underlying dimensions.}  }
\end{figure}


 The answer is that this one component not only detects the outlier
 word mix, but also the mix of words associated with the other ray in
 Figure \ref{fig:outloading}.

 After rotation, clearer picture
 emerges, one that does not mix rays (clusters) into a single
 components.

% rotate the components  (skip first as its the logToken effect)
% check that these match:  (V[,2:k] %*% vm$rotmat)[1:3,1:6]; v[1:3,1:6]
<<rotate-components, cache=TRUE, echo=FALSE, results='hide'>>=
k <- 250
vm <- varimax(V[,2:k])
v <- vm$loadings

@

% draw rotated components
\begin{figure}
<<rotcomponents, echo=FALSE, results='hide'>>=
draw.pair(v, 7,label="Rotated");

@
\caption{  \label{fig:rotcomponents}
 {\sl Rotated LSA components have simpler structure that confines
 word set to one variable.}  }
\end{figure}


 After rotation, the explanatory power in regression is less
 concentrated in leading terms, more spread out.


% plot t-stats of rotated components
\begin{figure}
<<rottstats, echo=FALSE, results='hide'>>=
lsa.vm <- LSA[,2:250] %*% vm$rotmat
colnames(lsa.vm) <- paste0("LVM",1:ncol(lsa.vm))  # 0 based
sr.rot <- summary(regr.rot <- lm(logPrice ~ poly(logTokens,5) + lsa.vm))
coef.summary.plot(sr.rot, "Rotated Component", omit=6, show.qq=FALSE)

@
\caption{  \label{fig:rottstats}
  {\sl Absolute $t$-statistics from the regression of log prices on varimax
   rotated LSA components of $\widetilde{W}$.}  }
\end{figure}


 And what about the outlier component?  How does it contribute to the
 model with rotated components?  It does not add significant
 variation.

<<regr-post-rot>>=
## adding the outlier variable no longer has significant effect on the model
lsa.vm <- (LSA[,2:250] %*% vm$rotmat)[,1:30]
colnames(lsa.vm) <- paste0("LVM",1:ncol(lsa.vm))
sr.rot <- summary(regr.rot <- lm(logPrice ~ poly(logTokens,5) + lsa.vm)); sr.rot

@


% show outlier component after rotation
\begin{figure}
<<"rot_out_loading", echo=FALSE, results='hide'>>=
draw.pair(v,26, label="Rotated Component")

@
\caption{  \label{fig:rotoutloading}
  {\sl Loadings of LSA components typically mix several underlying dimensions.}  }
\end{figure}


%--------------------------------------------------------------------------
\section{Conclusion}
\label{sec:disc}
%--------------------------------------------------------------------------

  Regression modeling always benefits from greater substantive
 insight, and the modeling of text is no exception.  An obvious
 approach to building regressors from text data relies on a
 substantive analysis of the text.  For example, sentiment analysis
 constructs a domain-specific lexicon of positive and negative words.
  In the context of real estate, one might suspect words such as
 ``modern'' and ``spacious'' to be associated with more expensive
 properties, whereas ``Fannie Mae'' and ``fixer-upper'' to signal
 properties with lower prices.  The development of such lexicons has
 been an active area of research in sentiment analysis over the past
 decade \citep{taboada11}.  The development of a lexicon require
 substantial knowledge of the context and the results are known to be
 domain specific.  Each new problem requires a new lexicon.  The
 lexicon for pricing homes would be quite different from the lexicon
 for diagnosing patient health.  Our approach is also domain specific,
 but requires little user input and so can be highly automated.


  If the left singular vectors were sparse, only 0/1, then the
 heuristic explanation could become less heuristic and more honest.
  Would sparse CCA (Witten et al) be useful? \citet{witten09}


%--------------------------------------------------------------------------
\section*{Acknowledgment}
%--------------------------------------------------------------------------

 The authors thank Vanessa Villatoro from Trulia's PR Team for
 allowing us to scrape the data from their web site.

%--------------------------------------------------------------------------
% References
%--------------------------------------------------------------------------

\bibliography{stat,text}
\bibliographystyle{../../bst/ims}

\end{document} %==========================================================
